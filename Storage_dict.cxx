//
// File generated by rootcint at Sun Apr  6 15:40:59 2008

// Do NOT change. Changes will be lost next time file is generated
//

#include "RConfig.h"
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "Storage_dict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void Storage_ShowMembers(void *obj, TMemberInspector &R__insp, char *R__parent);
   static void *new_Storage(void *p = 0);
   static void *newArray_Storage(Long_t size, void *p);
   static void delete_Storage(void *p);
   static void deleteArray_Storage(void *p);
   static void destruct_Storage(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Storage*)
   {
      ::Storage *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Storage >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Storage", ::Storage::Class_Version(), "/home/fantasia/work/netflix/include/Storage.h", 13,
                  typeid(::Storage), DefineBehavior(ptr, ptr),
                  &::Storage::Dictionary, isa_proxy, 0,
                  sizeof(::Storage) );
      instance.SetNew(&new_Storage);
      instance.SetNewArray(&newArray_Storage);
      instance.SetDelete(&delete_Storage);
      instance.SetDeleteArray(&deleteArray_Storage);
      instance.SetDestructor(&destruct_Storage);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Storage*)
   {
      return GenerateInitInstanceLocal((::Storage*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Storage*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *Storage::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Storage::Class_Name()
{
   return "Storage";
}

//______________________________________________________________________________
const char *Storage::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Storage*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Storage::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Storage*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Storage::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Storage*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Storage::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Storage*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void Storage::Streamer(TBuffer &R__b)
{
   // Stream an object of class Storage.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> fnmovies;
      R__b >> fnusers;
      R__b >> fnentries;
      R__b >> fndim;
      R__b >> fstep_mode;
      R__b >> fniterations;
      R__b >> fminx;
      R__b >> fmaxx;
      R__b >> fstep_size;
      R__b >> fmaxdist;
      R__b >> frscale;
      R__b >> huserlist;
      R__b >> hnrec;
      R__b.CheckByteCount(R__s, R__c, Storage::IsA());
   } else {
      R__c = R__b.WriteVersion(Storage::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << fnmovies;
      R__b << fnusers;
      R__b << fnentries;
      R__b << fndim;
      R__b << fstep_mode;
      R__b << fniterations;
      R__b << fminx;
      R__b << fmaxx;
      R__b << fstep_size;
      R__b << fmaxdist;
      R__b << frscale;
      R__b << (TObject*)huserlist;
      R__b << (TObject*)hnrec;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void Storage::ShowMembers(TMemberInspector &R__insp, char *R__parent)
{
      // Inspect the data members of an object of class Storage.
      TClass *R__cl = ::Storage::IsA();
      Int_t R__ncp = strlen(R__parent);
      if (R__ncp || R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__parent, "fnmovies", &fnmovies);
      R__insp.Inspect(R__cl, R__parent, "fnusers", &fnusers);
      R__insp.Inspect(R__cl, R__parent, "fnentries", &fnentries);
      R__insp.Inspect(R__cl, R__parent, "fndim", &fndim);
      R__insp.Inspect(R__cl, R__parent, "fstep_mode", &fstep_mode);
      R__insp.Inspect(R__cl, R__parent, "fniterations", &fniterations);
      R__insp.Inspect(R__cl, R__parent, "fminx", &fminx);
      R__insp.Inspect(R__cl, R__parent, "fmaxx", &fmaxx);
      R__insp.Inspect(R__cl, R__parent, "fstep_size", &fstep_size);
      R__insp.Inspect(R__cl, R__parent, "fmaxdist", &fmaxdist);
      R__insp.Inspect(R__cl, R__parent, "frscale", &frscale);
      R__insp.Inspect(R__cl, R__parent, "*huserlist", &huserlist);
      R__insp.Inspect(R__cl, R__parent, "*hnrec", &hnrec);
      TObject::ShowMembers(R__insp, R__parent);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Storage(void *p) {
      return  p ? new(p) ::Storage : new ::Storage;
   }
   static void *newArray_Storage(Long_t nElements, void *p) {
      return p ? new(p) ::Storage[nElements] : new ::Storage[nElements];
   }
   // Wrapper around operator delete
   static void delete_Storage(void *p) {
      delete ((::Storage*)p);
   }
   static void deleteArray_Storage(void *p) {
      delete [] ((::Storage*)p);
   }
   static void destruct_Storage(void *p) {
      typedef ::Storage current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::Storage

/********************************************************
* Storage_dict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

extern "C" void G__cpp_reset_tagtableStorage_dict();

extern "C" void G__set_cpp_environmentStorage_dict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("Storage.h");
  G__add_compiledheader("Storage.cxx");
  G__cpp_reset_tagtableStorage_dict();
}
#include <new>
extern "C" int G__cpp_dllrevStorage_dict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* Storage */
static int G__Storage_dict_129_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Storage* p = NULL;
   long gvp = G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new Storage[n];
     } else {
       p = new((void*) gvp) Storage[n];
     }
   } else {
     if ((gvp == G__PVOID) || (gvp == 0)) {
       p = new Storage;
     } else {
       p = new((void*) gvp) Storage;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__Storage_dictLN_Storage);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Storage_dict_129_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Storage* p = NULL;
   long gvp = G__getgvp();
   //m: 4
   if ((gvp == G__PVOID) || (gvp == 0)) {
     p = new Storage(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
   } else {
     p = new((void*) gvp) Storage(
(Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1])
, (Int_t) G__int(libp->para[2]), (Int_t) G__int(libp->para[3]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__Storage_dictLN_Storage);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Storage_dict_129_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Storage*) G__getstructoffset())->Set_Particlenums((Int_t) G__int(libp->para[0]), (Int_t) G__int(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Storage_dict_129_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Storage*) G__getstructoffset())->Add_Userlist((TH1I*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Storage_dict_129_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Storage::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Storage_dict_129_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Storage::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Storage_dict_129_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Storage::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Storage_dict_129_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Storage::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Storage_dict_129_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Storage*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Storage_dict_129_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Storage::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Storage_dict_129_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Storage::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Storage_dict_129_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Storage::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__Storage_dict_129_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Storage::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__Storage_dict_129_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Storage* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Storage(*(Storage*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   result7->type = 'u';
   result7->tagnum = G__get_linked_tagnum(&G__Storage_dictLN_Storage);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Storage G__TStorage;
static int G__Storage_dict_129_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   long gvp = G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == G__PVOID) {
       delete[] (Storage*) soff;
     } else {
       G__setgvp(G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Storage*) (soff+(sizeof(Storage)*i)))->~G__TStorage();
       }
       G__setgvp(gvp);
     }
   } else {
     if (gvp == G__PVOID) {
       delete (Storage*) soff;
     } else {
       G__setgvp(G__PVOID);
       ((Storage*) (soff))->~G__TStorage();
       G__setgvp(gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__Storage_dict_129_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Storage* dest = (Storage*) G__getstructoffset();
   *dest = *(Storage*) libp->para[0].ref;
   const Storage& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* Storage */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncStorage_dict {
 public:
  G__Sizep2memfuncStorage_dict(): p(&G__Sizep2memfuncStorage_dict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncStorage_dict::*p)();
};

size_t G__get_sizep2memfuncStorage_dict()
{
  G__Sizep2memfuncStorage_dict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceStorage_dict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__Storage_dictLN_Storage))) {
     Storage *G__Lderived;
     G__Lderived=(Storage*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__Storage_dictLN_Storage),G__get_linked_tagnum(&G__Storage_dictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableStorage_dict() {

   /* Setting up typedef entry */
   G__search_typename2("Int_t",105,-1,0,-1);
   G__setnewtype(-1,"Signed integer 4 bytes (int)",0);
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__Storage_dictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__Storage_dictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* Storage */
static void G__setup_memvarStorage(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__Storage_dictLN_Storage));
   { Storage *p; p=(Storage*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->fnmovies)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fnmovies=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fnusers)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fnusers=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fnentries)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fnentries=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fndim)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fndim=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fstep_mode)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fstep_mode=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fniterations)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"fniterations=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fminx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fminx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fmaxx)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fmaxx=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fstep_size)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fstep_size=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->fmaxdist)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"fmaxdist=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->frscale)-(long)(p)),102,0,0,-1,G__defined_typename("Float_t"),-1,1,"frscale=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->huserlist)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__Storage_dictLN_TH1I),-1,-1,1,"huserlist=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->hnrec)-(long)(p)),85,0,0,G__get_linked_tagnum(&G__Storage_dictLN_TH1I),-1,-1,1,"hnrec=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__Storage_dictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarStorage_dict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncStorage(void) {
   /* Storage */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__Storage_dictLN_Storage));
   G__memfunc_setup("Storage",725,G__Storage_dict_129_0_1, 105, G__get_linked_tagnum(&G__Storage_dictLN_Storage), -1, 0, 0, 1, 1, 0, "", ": fnmovies(0), fnusers(0), fnentries(0) { }", (void*) NULL, 0);
   G__memfunc_setup("Storage",725,G__Storage_dict_129_0_2, 105, G__get_linked_tagnum(&G__Storage_dictLN_Storage), -1, 0, 4, 1, 1, 0, 
"i - 'Int_t' 0 - num_m i - 'Int_t' 0 - num_u "
"i - 'Int_t' 0 - sm i - 'Int_t' 0 - nd", ": fnmovies(nm), fnusers(nu) { }", (void*) NULL, 0);
   G__memfunc_setup("Print",525,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 8, "C - 'Option_t' 10 '\"\"' option", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Set_Particlenums",1666,G__Storage_dict_129_0_4, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - 'Int_t' 0 - nm i - 'Int_t' 0 - nu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Add_Userlist",1219,G__Storage_dict_129_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TH1I' - 0 - hu", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("IsFolder",792,(G__InterfaceMethod) NULL,103, -1, G__defined_typename("Bool_t"), 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Browse",626,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "U 'TBrowser' - 0 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Class",502,G__Storage_dict_129_0_8, 85, G__get_linked_tagnum(&G__Storage_dictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (TClass* (*)())(&Storage::Class), 0);
   G__memfunc_setup("Class_Name",982,G__Storage_dict_129_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&Storage::Class_Name), 0);
   G__memfunc_setup("Class_Version",1339,G__Storage_dict_129_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (Version_t (*)())(&Storage::Class_Version), 0);
   G__memfunc_setup("Dictionary",1046,G__Storage_dict_129_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (void (*)())(&Storage::Dictionary), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__Storage_dictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TMemberInspector' - 1 - insp C - - 0 - parent", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__Storage_dict_129_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__Storage_dict_129_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&Storage::DeclFileName), 0);
   G__memfunc_setup("ImplFileLine",1178,G__Storage_dict_129_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&Storage::ImplFileLine), 0);
   G__memfunc_setup("ImplFileName",1171,G__Storage_dict_129_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) (const char* (*)())(&Storage::ImplFileName), 0);
   G__memfunc_setup("DeclFileLine",1152,G__Storage_dict_129_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) (int (*)())(&Storage::DeclFileLine), 0);
   // automatic copy constructor
   G__memfunc_setup("Storage", 725, G__Storage_dict_129_0_20, (int) ('i'), G__get_linked_tagnum(&G__Storage_dictLN_Storage), -1, 0, 1, 1, 1, 0, "u 'Storage' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Storage", 851, G__Storage_dict_129_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__Storage_dict_129_0_22, (int) ('u'), G__get_linked_tagnum(&G__Storage_dictLN_Storage), -1, 1, 1, 1, 1, 0, "u 'Storage' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncStorage_dict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {
}

static void G__cpp_setup_global2() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalStorage_dict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
  G__cpp_setup_global2();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcStorage_dict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__Storage_dictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__Storage_dictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__Storage_dictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__Storage_dictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__Storage_dictLN_TBrowser = { "TBrowser" , 99 , -1 };
G__linked_taginfo G__Storage_dictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__Storage_dictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__Storage_dictLN_TH1I = { "TH1I" , 99 , -1 };
G__linked_taginfo G__Storage_dictLN_Storage = { "Storage" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableStorage_dict() {
  G__Storage_dictLN_TClass.tagnum = -1 ;
  G__Storage_dictLN_TBuffer.tagnum = -1 ;
  G__Storage_dictLN_TMemberInspector.tagnum = -1 ;
  G__Storage_dictLN_TObject.tagnum = -1 ;
  G__Storage_dictLN_TBrowser.tagnum = -1 ;
  G__Storage_dictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__Storage_dictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__Storage_dictLN_TH1I.tagnum = -1 ;
  G__Storage_dictLN_Storage.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableStorage_dict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__Storage_dictLN_TClass);
   G__get_linked_tagnum_fwd(&G__Storage_dictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__Storage_dictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__Storage_dictLN_TObject);
   G__get_linked_tagnum_fwd(&G__Storage_dictLN_TBrowser);
   G__get_linked_tagnum_fwd(&G__Storage_dictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__Storage_dictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__Storage_dictLN_TH1I);
   G__tagtable_setup(G__get_linked_tagnum(&G__Storage_dictLN_Storage),sizeof(Storage),-1,62720,"Storage class",G__setup_memvarStorage,G__setup_memfuncStorage);
}
extern "C" void G__cpp_setupStorage_dict(void) {
  G__check_setup_version(30051515,"G__cpp_setupStorage_dict()");
  G__set_cpp_environmentStorage_dict();
  G__cpp_setup_tagtableStorage_dict();

  G__cpp_setup_inheritanceStorage_dict();

  G__cpp_setup_typetableStorage_dict();

  G__cpp_setup_memvarStorage_dict();

  G__cpp_setup_memfuncStorage_dict();
  G__cpp_setup_globalStorage_dict();
  G__cpp_setup_funcStorage_dict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncStorage_dict();
  return;
}
class G__cpp_setup_initStorage_dict {
  public:
    G__cpp_setup_initStorage_dict() { G__add_setup_func("Storage_dict",(G__incsetup)(&G__cpp_setupStorage_dict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initStorage_dict() { G__remove_setup_func("Storage_dict"); }
};
G__cpp_setup_initStorage_dict G__cpp_setup_initializerStorage_dict;

